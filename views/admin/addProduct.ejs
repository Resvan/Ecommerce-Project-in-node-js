<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropper/2.3.4/cropper.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/0.8.1/cropper.min.js"></script>
<style>
    #galleryImages, #cropper{
  width: 100%;
  float: left;
}
canvas{
  max-width: 100%;
  display: inline-block;
}
#cropImageBtn{
  display: none;
}
img{
  width: 100%;
}
.img-preview{
  float: left;
}
.singleImageCanvasContainer{
  max-width: 300px;
  display: inline-block;
  position: relative;
  margin: 2px;
}
.singleImageCanvasCloseBtn{
  position: absolute;
  top: 5px;
  right: 5px;
}
</style>
<!-- Header -->
<div class="header bg-gradient-primary py-7 py-lg-5">
    <div class="container">
        <div class="header-body text-center ">
            <div class="row justify-content-center">
                <div class="col-lg-5 col-md-6">
                    <h1 class="text-white">Add Product</h1>
                    <p class="text-lead text-light"></p>
                </div>
            </div>
        </div>
    </div>
    <div class="separator separator-bottom separator-skew zindex-100">
        <svg x="0" y="0" viewBox="0 0 2560 100" preserveAspectRatio="none" version="1.1"
            xmlns="http://www.w3.org/2000/svg">
            <polygon class="fill-default" points="2560 0 2560 100 0 100"></polygon>
        </svg>
    </div>
</div>
<!-- Page content -->
<div class="container pb-5">
    <!-- Table -->
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <div class="card bg-secondary shadow border-0">
                <div class="card-body px-lg-5 py-lg-5">
                <form action="/admin/add-product" method="post" enctype="multipart/form-data">
                    <% if(message.length> 0){ %>
                        <h5 class="alert alert-danger">
                            <%= message %>
                        </h5>
                        <% } %>
                    <!-- 2 column grid layout with text inputs for the first and last names -->
                    <div class="row mb-2">
                        <div class="col">
                            <div class="form-outline">
                                <label for="name">Name</label>
                                <input class="form-control" type="text" id="name" onkeyup="validateName()" name="name" placeholder="Name" /> 
                            </div>
                            <span id="name-error"></span>
                        </div>
                    </div>
                    <div class="row mb-2">
                        <% if(category.length> 0){ %>
                        <div class="col">
                            <div class="form-outline ">   
                                <label for="name">Select Category</label><select name="category" id="catergoy" class="w-100 form-control">
                                    <% category.forEach(function(item){ %>
                                    <option><%= item.name%></option>
                                    <% }) %>
                                </select>
                            </div>
                        </div>
                        <% } %>
                        <div class="col ">
                            <div class="form-outline">
                                <label for="price">Price</label>
                                <input class="form-control" type="number" id="price" onkeyup="validatePrice()" name="price" placeholder="Price" />
                            </div>
                            <span id="price-error"></span>
                        </div>
                    </div>
                    <label for="Stock">Stock</label>
                    <div class="row">
                        <div class="col-6 col-sm-4 col-md-2 mb-1">
                            <input id="stock-s" name="S" type="number" class="form-control validate" placeholder="S" onkeyup="validateStock_S()" />
                            <small id="size-s-error"></small>
                        </div>
                        
                        <div class="col-6 col-sm-4 col-md-2 mb-1">
                            <input id="stock-m" name="M" type="number" class="form-control validate"  placeholder="M" onkeyup="validateStock_M()" />
                            <small id="size-m-error"></small>
                        </div>
                        
                        <div class="col-6 col-sm-4 col-md-2 mb-1">
                            <input id="stock-l" name="L" type="number" class="form-control validate" placeholder="L" onkeyup="validateStock_L()" />
                            <small id="size-l-error"></small>
                        </div>
                        
                        <div class="col-6 col-sm-6 col-md-3 mb-1">
                            <input id="stock-xl" name="XL" type="number" class="form-control validate"  placeholder="XL" onkeyup="validateStock_XL()"/>
                            <small id="size-xl-error"></small>
                        </div>
                        
                        <div class="col-sm-6 col-md-3 mb-1">
                            <input id="stock-xxl" name="XXL" type="number" class="form-control validate"  placeholder="XXL" onkeyup="validateStock_XXL()"/>
                            <small id="size-xxl-error"></small>
                        </div>
                          
                    </div>
                    <div class="row mb-1">
                        <div class="col">
                                <label for="Image"></label>
                                <input type="button"  class="btn btn-primary btn-block mx-auto" value="UPLOAD PRODUCT IMAGE"
                                    onclick="document.getElementById('fileInput').click(); validateImage() "  />
                                    <input id="fileInput" type="file" style="display:none;"   name="image" onchange="validateImage()" multiple />
                            <span id="image-error"></span>
                        </div>
                        <!-- <div id="crop">
                            <div class="vald-info" id="info"></div>
                            <h5 class="error_form text-danger" id="image1_error_message"></h5>
                            <div style="display: flex">
                                <div id="image-box1" class="image-container clr" >
                                </div>
                                <button type="button" class="btn btneds bg-success" id="crop-btn1"
                                    style=" margin-top: 10px; display: none; width: 50%; margin: 20rem 0rem 0rem 0rem;">crop</button>
                            </div>
                        </div> -->
                        <input type="hidden" id="profile_img_data" name="some" >
                        <div class="img-preview"></div>
                        <div id="galleryImages"></div>
                        <div id="cropper">
                            <canvas id="cropperImg" width="0" height="0"></canvas>
                            <button type="button" class="cropImageBtn" id="cropImageBtn">Crop</button>
                        </div>
                    </div>
                    
                
                   
                
                    <!-- Password input -->
                    <div class="form-outline mb-3">
                        <label class="form-label" for="description">Description</label>
                        <input type="text" name="description" id="description" class="form-control form-control-lg" />
                        
                    </div>
                
                    
                
                    <!-- Submit button -->
                    <button type="submit" class="btn btn-primary btn-block mb-4">Add Product</button>
                </form>
                </div>
            </div>
        </div>
    </div>
    
</div>
<script>
    const invalidChars = ["-", "e", "+", "E"];
    $("input[type='number']").on("keydown", function (e) {
        if
            (invalidChars.includes(e.key)) { e.preventDefault(); }
    })
</script>
<script>
    var nameError = document.getElementById('name-error');
    var priceError = document.getElementById('price-error');
    var imageError = document.getElementById('image-error');
    var sizeErrorS = document.getElementById('size-s-error');
    var sizeErrorM = document.getElementById('size-m-error');
    var sizeErrorL = document.getElementById('size-l-error');
    var sizeErrorXL = document.getElementById('size-xl-error');
    var sizeErrorXXL = document.getElementById('size-xxl-error');


    function validateName() {
        var name = document.getElementById('name').value.trim();
        console.log(name);

        if (name.length == 0) {
            nameError.innerHTML = 'Name is Required';
            nameError.style.color = 'red'
            return false;
        }

        if (!name.match(/^[A-Za-z ]*$/)) {
            nameError.innerHTML = 'Write a FullName';
            nameError.style.color = 'red'
            return false;
        }

        if (name.length < 3) {
            nameError.innerHTML = 'Enter minimum 3 charactors';
            nameError.style.color = 'red'
            return false;
        }

        nameError.innerHTML = 'Name is valid';
        nameError.style.color = 'green'
        return true;
    }

    


    function validatePrice() {
        var price = document.getElementById("price").value.trim();
        if (price.length == 0) {
            priceError.innerHTML = 'Price is required';
            priceError.style.color = 'red'

            return false;
        }
       
        priceError.innerHTML = ""
        priceError.innerHTML = "Price is valid"
        priceError.style.color = 'green'
        return true;


    }
    function validateStock_S() {
            var stock = document.getElementById("stock-s").value.trim();
            if (stock.length == 0) {
                sizeErrorS.innerHTML = 'Required';
                sizeErrorS.style.color = 'red'

                return false;
            }

            sizeErrorS.innerHTML = ""
            sizeErrorS.innerHTML = "Valid"
            sizeErrorS.style.color = 'green'
            return true;


        }
        function validateStock_M() {
                var stock = document.getElementById("stock-m").value.trim();
                if (stock.length == 0) {
                    sizeErrorM.innerHTML = 'Required';
                    sizeErrorM.style.color = 'red'

                    return false;
                }

                sizeErrorM.innerHTML = ""
                sizeErrorM.innerHTML = "Valid"
                sizeErrorM.style.color = 'green'
                return true;


            }
            function validateStock_L() {
                    var stock = document.getElementById("stock-l").value.trim();
                    if (stock.length == 0) {
                        sizeErrorL.innerHTML = 'Required';
                        sizeErrorL.style.color = 'red'

                        return false;
                    }

                    sizeErrorL.innerHTML = ""
                    sizeErrorL.innerHTML = "Valid"
                    sizeErrorL.style.color = 'green'
                    return true;


                }
                function validateStock_XL() {
                        var stock = document.getElementById("stock-xl").value.trim();
                        if (stock.length == 0) {
                            sizeErrorXL.innerHTML = 'Required';
                            sizeErrorXL.style.color = 'red'

                            return false;
                        }

                        sizeErrorXL.innerHTML = ""
                        sizeErrorXL.innerHTML = "Valid"
                        sizeErrorXL.style.color = 'green'
                        return true;


                    }
                    function validateStock_XXL() {
                            var stock = document.getElementById("stock-xxl").value.trim();
                            if (stock.length == 0) {
                                sizeErrorXXL.innerHTML = 'Required';
                                sizeErrorXXL.style.color = 'red'

                                return false;
                            }

                            sizeErrorXXL.innerHTML = ""
                            sizeErrorXXL.innerHTML = "Valid"
                            sizeErrorXXL.style.color = 'green'
                            return true;


                        }
        function validateImage() {
            
                var numFiles = $("input[type='file']").get(0).files.length
                if (numFiles <= 3 ) {
                    imageError.innerHTML = `${numFiles} selected ! select 4 images`
                    imageError.style.color = 'red'
                    return false
            } else if(numFiles >= 5){
                    imageError.innerHTML = `${numFiles} selected ! select 4 images`
                    imageError.style.color = 'red'
                    return false
            }else {
            
                    imageError.innerHTML = "Image is loaded"
                    imageError.style.color = 'green'
                    return true
                    
            }

            
        }
    $(document).on("submit", "form", function (e) {
        
        if ( validateName() && validatePrice() && validateStock_S() && validateStock_L() && validateStock_M() && validateStock_XL() && validateStock_XXL() && validateImage()) {
           
        } else {
            e.preventDefault();
            alert('invalid data')
            return false;
        }
    })
</script>
<script>
    const imagebox1 = document.getElementById("image-box1");
    const crop_btn1 = document.getElementById("crop-btn1");
    const input1 = document.getElementById("fileInput");

    // When user uploads the image this event will get triggered
    input1.addEventListener("change", () => {
        // Getting image file object from the input variable
        const img_data1 = input1.files[0];
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        const url1 = URL.createObjectURL(img_data1);
        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
        imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`;
        // Storing that cropping view image in a variable
        const image1 = document.getElementById("image1");
        // Displaying the image box
        document.getElementById("image-box1").style.display = "block";
        // Displaying the Crop buttton
        document.getElementById("crop-btn1").style.display = "block";
        // Hiding the Post button
        document.getElementById("fileInput").style.display = "block";
        const cropper1 = new Cropper(image1, {
            autoCropArea: 1,
            viewMode: 1,
            scalable: false,
            zoomable: false,
            movable: false,
            minCropBoxWidth: 50,
            minCropBoxHeight: 50,
        });
        // When crop button is clicked this event will get triggered
        crop_btn1.addEventListener("click", () => {
            // This method coverts the selected cropped image on the cropper canvas into a blob object
            cropper1.getCroppedCanvas().toBlob((blob) => {
                // Gets the original image data
                let fileInputElement1 = document.getElementById("fileInput");
                // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                let file1 = new File([blob], img_data1.name, {
                    type: "image/*",
                    lastModified: new Date().getTime(),
                });
                // Create a new container
                let container1 = new DataTransfer();
                // Add the cropped image file to the container
                container1.items.add(file1);
                // Replace the original image file with the new cropped image file
                fileInputElement1.files = container1.files;
                document.getElementById("fileInput").src = URL.createObjectURL(
                    fileInputElement1.files[0]
                );
                // Hide the cropper box
                document.getElementById("image-box1").style.display = "none";
                // Hide the crop button
                document.getElementById("crop-btn1").style.display = "none";

            });
        });
    });
</script>
<!-- <script>
    var c;
        var galleryImagesContainer = document.getElementById('galleryImages');
        var imageCropFileInput = document.getElementById('fileInput');
        var cropperImageInitCanvas = document.getElementById('cropperImg');
        var cropImageButton = document.getElementById('cropImageBtn');
        // Crop Function On change
        function imagesPreview(input) {
            var cropper;
            galleryImagesContainer.innerHTML = '';
            var img = [];
            if (cropperImageInitCanvas.cropper) {
                cropperImageInitCanvas.cropper.destroy();
                cropImageButton.style.display = 'none';
                cropperImageInitCanvas.width = 0;
                cropperImageInitCanvas.height = 0;
            }
            if (input.files.length) {
                var i = 0;
                var index = 0;
                for (let singleFile of input.files) {
                    var reader = new FileReader();
                    reader.onload = function (event) {
                        var blobUrl = event.target.result;
                        img.push(new Image());
                        img[i].onload = function (e) {
                            // Canvas Container
                            var singleCanvasImageContainer = document.createElement('div');
                            singleCanvasImageContainer.id = 'singleImageCanvasContainer' + index;
                            singleCanvasImageContainer.className = 'singleImageCanvasContainer';
                            // Canvas Close Btn
                            var singleCanvasImageCloseBtn = document.createElement('button');
                            var singleCanvasImageCloseBtnText = document.createTextNode('Close');
                            // var singleCanvasImageCloseBtnText = document.createElement('i');
                            // singleCanvasImageCloseBtnText.className = 'fa fa-times';
                            singleCanvasImageCloseBtn.id = 'singleImageCanvasCloseBtn' + index;
                            singleCanvasImageCloseBtn.className = 'singleImageCanvasCloseBtn';
                            singleCanvasImageCloseBtn.onclick = function () { removeSingleCanvas(this) };
                            singleCanvasImageCloseBtn.appendChild(singleCanvasImageCloseBtnText);
                            singleCanvasImageContainer.appendChild(singleCanvasImageCloseBtn);
                            // Image Canvas
                            var canvas = document.createElement('canvas');
                            canvas.id = 'imageCanvas' + index;
                            canvas.className = 'imageCanvas singleImageCanvas';
                            canvas.width = e.currentTarget.width;
                            canvas.height = e.currentTarget.height;
                            canvas.onclick = function () { cropInit(canvas.id); };
                            singleCanvasImageContainer.appendChild(canvas)
                            // Canvas Context
                            var ctx = canvas.getContext('2d');
                            ctx.drawImage(e.currentTarget, 0, 0);
                            // galleryImagesContainer.append(canvas);
                            galleryImagesContainer.appendChild(singleCanvasImageContainer);
                            while (document.querySelectorAll('.singleImageCanvas').length == input.files.length) {
                                var allCanvasImages = document.querySelectorAll('.singleImageCanvas')[0].getAttribute('id');
                                cropInit(allCanvasImages);
                                break;
                            };
                            urlConversion();
                            index++;
                        };
                        img[i].src = blobUrl;
                        i++;
                    }
                    reader.readAsDataURL(singleFile);
                }
                // addCropButton();
                // cropImageButton.style.display = 'block';
            }
        }
        imageCropFileInput.addEventListener("change", function (event) {
            imagesPreview(event.target);
        });
        // Initialize Cropper
        function cropInit(selector) {
            c = document.getElementById(selector);
            console.log(document.getElementById(selector));
            if (cropperImageInitCanvas.cropper) {
                cropperImageInitCanvas.cropper.destroy();
            }
            var allCloseButtons = document.querySelectorAll('.singleImageCanvasCloseBtn');
            for (let element of allCloseButtons) {
                element.style.display = 'block';
            }
            c.previousSibling.style.display = 'none';
            // c.id = croppedImg;
            var ctx = c.getContext('2d');
            var imgData = ctx.getImageData(0, 0, c.width, c.height);
            var image = cropperImageInitCanvas;
            image.width = c.width;
            image.height = c.height;
            var ctx = image.getContext('2d');
            ctx.putImageData(imgData, 0, 0);
            cropper = new Cropper(image, {
                aspectRatio: 1 / 1,
                preview: '.img-preview',
                crop: function (event) {
                    // console.log(event.detail.x);
                    // console.log(event.detail.y);
                    // console.log(event.detail.width);
                    // console.log(event.detail.height);
                    // console.log(event.detail.rotate);
                    // console.log(event.detail.scaleX);
                    // console.log(event.detail.scaleY);
                    cropImageButton.style.display = 'block';
                }
            });

        }
        // Initialize Cropper on CLick On Image
        // function cropInitOnClick(selector) {
        //   if(cropperImageInitCanvas.cropper){
        //       cropperImageInitCanvas.cropper.destroy();
        //       // cropImageButton.style.display = 'none';
        //       cropInit(selector);
        //       // addCropButton();
        //       // cropImageButton.style.display = 'block';
        //   } else {
        //       cropInit(selector);
        //       // addCropButton();
        //       // cropImageButton.style.display = 'block';
        //   }
        // }
        // Crop Image
        function image_crop() {
            if (cropperImageInitCanvas.cropper) {
                var cropcanvas = cropperImageInitCanvas.cropper.getCroppedCanvas({ width: 250, height: 250 });
                // document.getElementById('cropImages').appendChild(cropcanvas);
                var ctx = cropcanvas.getContext('2d');
                var imgData = ctx.getImageData(0, 0, cropcanvas.width, cropcanvas.height);
                // var image = document.getElementById(c);
                c.width = cropcanvas.width;
                c.height = cropcanvas.height;
                var ctx = c.getContext('2d');
                ctx.putImageData(imgData, 0, 0);
                cropperImageInitCanvas.cropper.destroy();
                cropperImageInitCanvas.width = 0;
                cropperImageInitCanvas.height = 0;
                cropImageButton.style.display = 'none';
                var allCloseButtons = document.querySelectorAll('.singleImageCanvasCloseBtn');
                for (let element of allCloseButtons) {
                    element.style.display = 'block';
                }
                urlConversion();
                // cropperImageInitCanvas.style.display = 'none';
            } else {
                alert('Please select any Image you want to crop');
            }
        }
        cropImageButton.addEventListener("click", function () {
            image_crop();
        });
        // Image Close/Remove
        function removeSingleCanvas(selector) {
            selector.parentNode.remove();
            urlConversion();
        }
        // Dynamically Add Crop Btn
        // function addCropButton() {
        //   // add crop button
        //     var cropBtn = document.createElement('button');
        //     cropBtn.setAttribute('type', 'button');
        //     cropBtn.id = 'cropImageBtn';
        //     cropBtn.className = 'btn btn-block crop-button';
        //     var cropBtntext = document.createTextNode('crop');
        //     cropBtn.appendChild(cropBtntext);
        //     document.getElementById('cropper').appendChild(cropBtn);
        //     cropBtn.onclick = function() { image_crop(cropBtn.id); };
        // }
        // Get Converted Url
        function urlConversion() {
            var allImageCanvas = document.querySelectorAll('.singleImageCanvas');
            var convertedUrl = '';
            for (let element of allImageCanvas) {
                convertedUrl += element.toDataURL('image/jpeg');
                convertedUrl += 'img_url';
            }
            document.getElementById('profile_img_data').value = convertedUrl;
            var blobBin = atob(convertedUrl.split(',')[1]);
            var array = [];
            for (var i = 0; i < blobBin.length; i++) {
                array.push(blobBin.charCodeAt(i));
            }
            var file = new Blob([new Uint8Array(array)], { type: 'image/png' });
            // Create a new container
            let container1 = new DataTransfer();
            // Add the cropped image file to the container
            container1.items.add(file);
            // Replace the original image file with the new cropped image file
            let fileInputElement1 = document.getElementById("fileInput");
            fileInputElement1.files = container1.files;
            document.getElementById("fileInput").src = URL.createObjectURL(
                fileInputElement1.files[0]
            );
        }

</script> -->